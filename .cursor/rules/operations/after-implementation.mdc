---
description: 
globs: 
alwaysApply: true
---
# AI アシスタントの成果物報告

AI アシスタントの成果物報告として、Dart ファイルへの変更を加えた際には以下のことを行なってください：

## 変更ファイルのテスト実行

新しいファイルを作成したり、既存のファイルを変更した場合は、対象ファイルのテストを実行して正常に動作することを確認してください。

### テスト実行方法

対象パッケージのディレクトリに移動してから、以下のコマンドを実行します：

1. **特定のテストファイルの実行**
   ```bash
   # flutter_test を使用するパッケージの場合
   flutter test test/path/to/your_test_file.dart
   
   # test を使用するパッケージの場合
   dart test test/path/to/your_test_file.dart
   ```

2. **変更ファイルの修正**
   テストが失敗した場合、必要に応じて以下を行なってください：
   - （テストが成功するように）変更したファイルの修正
   - （テスト自体を修正する必要がある場合）テストケースの修正

### 判断基準

テストの実行コマンドは、**パッケージが Flutter SDK に依存するかどうか（純粋な Dart パッケージかどうか）ではなく**、利用しているテストパッケージによって決定されます。

実行するテストファイルの import 文を確認してコマンドを選択してください：
- `import 'package:flutter_test/flutter_test.dart'` → `flutter test`
- `import 'package:test/test.dart'` のみ → `dart test`

## 変更ファイルの lint チェック

新しいファイルを作成したり、既存のファイルを変更した場合は、変更したファイルのみを対象に lint の問題が発生していないかを確認してください。


## 変更ファイルの lint チェック方法

1. **単一ファイルのチェック**: 
   - `dart analyze [変更したファイルパス]` を実行して、変更したファイルのみを対象に lint チェックを行う。
   - プロジェクトのルートディレクトリから `dart run custom_lint` を実行して、custom lint チェックを行う。
     - 注意: custom_lint は各パッケージのディレクトリからの実行では機能せず、プロジェクトルートから実行する必要があります。
2. **複数ファイルのチェック**: 複数のファイルを変更した場合は、各ファイルに対して個別に `dart analyze` を実行し、最後にプロジェクトルートから一度 `dart run custom_lint` を実行する。
3. **問題の修正**: 変更したファイルで lint の問題が発生していた場合、INFO レベルも含めて必ず問題が無くなるまで修正を続ける。

### 注意事項

- `melos run analyze` などの全体チェックは時間がかかるため、変更したファイルのみに焦点を当てる。
- 変更したファイルで lint エラーが解決されたことを確認する。
- 3 回以上同じファイルで lint エラーの修正をループしている場合は、ユーザーに相談する。

---

このルールファイルが参照されていることを確認するために、返答の最初に「✅ after-implementation」と記載してください。
ファイルの編集を終えた後、変更内容が上記のルールを遵守していることを確認し、遵守されていない箇所があれば修正を行ってください。その後、返答の最後に「💡 after-implementation」と記載してください。

