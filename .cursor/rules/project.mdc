---
alwaysApply: true
---
## プロジェクト概要

本プロジェクトは、パッケージ管理に **Melos** を使用した **モノレポアーキテクチャ** を採用した洗練された Flutter アプリケーションです。このプロジェクトは **Clean Architecture** の原則に従い、複数のパッケージにわたって関心事を明確に分離しています。

## パッケージ構成

このプロジェクトは Pub ワークスペースを使用し、以下のパッケージで構成されています：
- **`app`** - メイン Flutter アプリケーションのエントリーポイント
- **`base_ui`** - 共通 UI コンポーネントとテーマ
- **`domain`** - ビジネスロジックとユースケース
- **`injection`** - 依存性注入の設定
- **`repository`** - データレイヤーとリポジトリ実装
- **`system`** - システムレベルサービス（HTTP、ローカルストレージ）
- **`util`** - ユーティリティ関数とヘルパー

## アーキテクチャ

### Clean Architecture レイヤー
- **Domain Layer** (`domain/`): ビジネスエンティティ、ユースケース、リポジトリインターフェース
- **Data Layer** (`repository/`, `system/`): リポジトリ実装、データソース
- **Presentation Layer** (`app/`, `base_ui/`): UI コンポーネント、状態管理
- **Infrastructure** (`injection/`): 依存性注入、サービス設定

### 主要技術
- **状態管理**: コード生成付き Riverpod
- **UI**: カスタムテーマ付き Flutter Material Design
- **アーキテクチャ**: ドメイン駆動設計を用いた Clean Architecture
- **ローカライゼーション**: ARB ファイルを使った多言語サポート（日本語/英語）
- **テスト**: モックを使った包括的なテストカバレッジ
- **コード生成**: 不変データクラス用の Freezed、コード生成用の build_runner

## 開発ワークフロー

### バージョン管理
- Flutter バージョンは `.fvmrc` 設定で FVM により管理
- 安定版 Flutter チャンネルを使用
- 正しい Flutter バージョンを確保するために `fvm use` を実行

### ローカライゼーションプロセス
1. `app_ja.arb` に日本語文字列を追加
2. `melos run translate` を実行して英語翻訳を自動生成
3. ウィジェットで `L10n.of(context).keyName` を使用

### 状態管理パターン
- 型安全性のためのコード生成付き Riverpod
- 複雑な状態管理のための Notifier パターン
- 依存性注入のための Provider オーバーライド

### テスト戦略
- ドメインロジック、ユーティリティ、リポジトリの単体テスト
- UI コンポーネントのウィジェットテスト
- エンドツーエンド機能の統合テスト
- 各パッケージの `coverage/` ディレクトリに生成されるカバレッジレポート

## コード品質基準

### コメントスタイル
- 全てのコメントは句点で終わる完全な文である必要があります
- 例: `// これは適切なコメントです。` (`// これは適切なコメント` ではなく)

### Lint ルール
- altive_lints に基づくカスタム lint 設定
- パブリック API ドキュメントが必要 (public_member_api_docs)
- 高いテストカバレッジ基準

---

このルールファイルが参照されていることを確認するために、返答の最初に「✅ project.mdc」と記載してください。
ファイルの編集を終えた後、変更内容が上記のルールを遵守していることを確認し、遵守されていない箇所があれば修正を行ってください。その後、返答の最後に「💡 project.mdc」と記載してください。