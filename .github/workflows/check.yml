name: Check

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]

concurrency:
  # 同じワークフローの同時実行は不要のため途中でキャンセルする。
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/bootstrap_project
      - name: Setup .env files
        run: cp clients/admin/assets/.env.example clients/admin/assets/.env
      - name: Setup Firebase options for CI
        run: |
          cat > clients/admin/lib/firebase_options.dart << 'EOF'
          // This file is generated for CI/CD purposes only.
          // In production, use: flutterfire configure
          // ignore_for_file: public_member_api_docs, combinators_ordering
          // ignore_for_file: no_default_cases
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;

          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                return web;
              }
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                case TargetPlatform.iOS:
                  return ios;
                case TargetPlatform.macOS:
                  return macos;
                default:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions are not supported for this platform.',
                  );
              }
            }

            static const FirebaseOptions web = FirebaseOptions(
              apiKey: 'dummy-api-key',
              appId: 'dummy-app-id',
              messagingSenderId: 'dummy-sender-id',
              projectId: 'dummy-project-id',
              storageBucket: 'dummy-bucket',
            );

            static const FirebaseOptions android = FirebaseOptions(
              apiKey: 'dummy-api-key',
              appId: 'dummy-app-id',
              messagingSenderId: 'dummy-sender-id',
              projectId: 'dummy-project-id',
              storageBucket: 'dummy-bucket',
            );

            static const FirebaseOptions ios = FirebaseOptions(
              apiKey: 'dummy-api-key',
              appId: 'dummy-app-id',
              messagingSenderId: 'dummy-sender-id',
              projectId: 'dummy-project-id',
              storageBucket: 'dummy-bucket',
              iosBundleId: 'com.example.dummy',
            );

            static const FirebaseOptions macos = FirebaseOptions(
              apiKey: 'dummy-api-key',
              appId: 'dummy-app-id',
              messagingSenderId: 'dummy-sender-id',
              projectId: 'dummy-project-id',
              storageBucket: 'dummy-bucket',
              iosBundleId: 'com.example.dummy',
            );
          }
          EOF
      - run: melos run analyze
      - run: melos run custom_lint
      - name: Formatting check
        # 実行権限を付与した上でフォーマットの差分を検出する。
        run: |
          melos run format
          ls -l .github/scripts/validate-formatting.sh
          chmod +x .github/scripts/validate-formatting.sh
          ls -l .github/scripts/validate-formatting.sh
          .github/scripts/validate-formatting.sh