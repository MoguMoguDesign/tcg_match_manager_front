// Mocks generated by Mockito 5.4.6 from annotations
// in domain/test/src/tournament/tournament_edit_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:domain/domain.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTournament_0 extends _i1.SmartFake implements _i2.Tournament {
  _FakeTournament_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetTournamentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTournamentUseCase extends _i1.Mock
    implements _i2.GetTournamentUseCase {
  @override
  _i3.Future<_i2.Tournament> invoke({required String? id}) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [], {#id: id}),
            returnValue: _i3.Future<_i2.Tournament>.value(
              _FakeTournament_0(
                this,
                Invocation.method(#invoke, [], {#id: id}),
              ),
            ),
            returnValueForMissingStub: _i3.Future<_i2.Tournament>.value(
              _FakeTournament_0(
                this,
                Invocation.method(#invoke, [], {#id: id}),
              ),
            ),
          )
          as _i3.Future<_i2.Tournament>);
}

/// A class which mocks [UpdateTournamentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTournamentUseCase extends _i1.Mock
    implements _i2.UpdateTournamentUseCase {
  @override
  _i3.Future<_i2.Tournament> invoke({
    required String? id,
    String? name,
    String? overview,
    String? category,
    String? tournamentMode,
    String? date,
    String? startDate,
    String? endDate,
    String? startTime,
    String? endTime,
    int? drawPoints,
    int? maxRounds,
    int? expectedPlayers,
    String? remarks,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [], {
              #id: id,
              #name: name,
              #overview: overview,
              #category: category,
              #tournamentMode: tournamentMode,
              #date: date,
              #startDate: startDate,
              #endDate: endDate,
              #startTime: startTime,
              #endTime: endTime,
              #drawPoints: drawPoints,
              #maxRounds: maxRounds,
              #expectedPlayers: expectedPlayers,
              #remarks: remarks,
            }),
            returnValue: _i3.Future<_i2.Tournament>.value(
              _FakeTournament_0(
                this,
                Invocation.method(#invoke, [], {
                  #id: id,
                  #name: name,
                  #overview: overview,
                  #category: category,
                  #tournamentMode: tournamentMode,
                  #date: date,
                  #startDate: startDate,
                  #endDate: endDate,
                  #startTime: startTime,
                  #endTime: endTime,
                  #drawPoints: drawPoints,
                  #maxRounds: maxRounds,
                  #expectedPlayers: expectedPlayers,
                  #remarks: remarks,
                }),
              ),
            ),
            returnValueForMissingStub: _i3.Future<_i2.Tournament>.value(
              _FakeTournament_0(
                this,
                Invocation.method(#invoke, [], {
                  #id: id,
                  #name: name,
                  #overview: overview,
                  #category: category,
                  #tournamentMode: tournamentMode,
                  #date: date,
                  #startDate: startDate,
                  #endDate: endDate,
                  #startTime: startTime,
                  #endTime: endTime,
                  #drawPoints: drawPoints,
                  #maxRounds: maxRounds,
                  #expectedPlayers: expectedPlayers,
                  #remarks: remarks,
                }),
              ),
            ),
          )
          as _i3.Future<_i2.Tournament>);
}
