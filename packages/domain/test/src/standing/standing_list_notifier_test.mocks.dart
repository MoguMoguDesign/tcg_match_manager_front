// Mocks generated by Mockito 5.4.6 from annotations
// in domain/test/src/standing/standing_list_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:domain/src/standing/get_final_standings_use_case.dart' as _i3;
import 'package:domain/src/standing/standing.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStanding_0 extends _i1.SmartFake implements _i2.Standing {
  _FakeStanding_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetFinalStandingsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFinalStandingsUseCase extends _i1.Mock
    implements _i3.GetFinalStandingsUseCase {
  @override
  _i4.Future<_i2.Standing> invoke({
    required String? baseUrl,
    required String? tournamentId,
    String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [], {
              #baseUrl: baseUrl,
              #tournamentId: tournamentId,
              #userId: userId,
            }),
            returnValue: _i4.Future<_i2.Standing>.value(
              _FakeStanding_0(
                this,
                Invocation.method(#invoke, [], {
                  #baseUrl: baseUrl,
                  #tournamentId: tournamentId,
                  #userId: userId,
                }),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Standing>.value(
              _FakeStanding_0(
                this,
                Invocation.method(#invoke, [], {
                  #baseUrl: baseUrl,
                  #tournamentId: tournamentId,
                  #userId: userId,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Standing>);
}
