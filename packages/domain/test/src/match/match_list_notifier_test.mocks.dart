// Mocks generated by Mockito 5.4.6 from annotations
// in domain/test/src/match/match_list_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:domain/src/match/get_published_matches_use_case.dart' as _i2;
import 'package:domain/src/match/match.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetPublishedMatchesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPublishedMatchesUseCase extends _i1.Mock
    implements _i2.GetPublishedMatchesUseCase {
  @override
  _i3.Future<List<_i4.Match>> invoke({
    required String? baseUrl,
    required String? tournamentId,
    required String? roundId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#invoke, [], {
              #baseUrl: baseUrl,
              #tournamentId: tournamentId,
              #roundId: roundId,
              #userId: userId,
            }),
            returnValue: _i3.Future<List<_i4.Match>>.value(<_i4.Match>[]),
            returnValueForMissingStub: _i3.Future<List<_i4.Match>>.value(
              <_i4.Match>[],
            ),
          )
          as _i3.Future<List<_i4.Match>>);
}
