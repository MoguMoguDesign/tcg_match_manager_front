// Mocks generated by Mockito 5.4.6 from annotations
// in domain/test/src/match/get_published_matches_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:repository/src/player/match_list_response.dart' as _i5;
import 'package:repository/src/player/match_player_repository.dart' as _i2;
import 'package:repository/src/player/match_submit_result_request.dart' as _i8;
import 'package:repository/src/player/match_submit_result_response.dart' as _i7;
import 'package:repository/src/repository_result.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MatchPlayerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMatchPlayerRepository extends _i1.Mock
    implements _i2.MatchPlayerRepository {
  @override
  _i3.Future<_i4.RepositoryResult<List<_i5.Match>>> getPublishedMatches({
    required String? baseUrl,
    required String? tournamentId,
    required String? roundId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPublishedMatches, [], {
              #baseUrl: baseUrl,
              #tournamentId: tournamentId,
              #roundId: roundId,
              #userId: userId,
            }),
            returnValue:
                _i3.Future<_i4.RepositoryResult<List<_i5.Match>>>.value(
                  _i6.dummyValue<_i4.RepositoryResult<List<_i5.Match>>>(
                    this,
                    Invocation.method(#getPublishedMatches, [], {
                      #baseUrl: baseUrl,
                      #tournamentId: tournamentId,
                      #roundId: roundId,
                      #userId: userId,
                    }),
                  ),
                ),
            returnValueForMissingStub:
                _i3.Future<_i4.RepositoryResult<List<_i5.Match>>>.value(
                  _i6.dummyValue<_i4.RepositoryResult<List<_i5.Match>>>(
                    this,
                    Invocation.method(#getPublishedMatches, [], {
                      #baseUrl: baseUrl,
                      #tournamentId: tournamentId,
                      #roundId: roundId,
                      #userId: userId,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i4.RepositoryResult<List<_i5.Match>>>);

  @override
  _i3.Future<_i4.RepositoryResult<_i7.MatchSubmitResultResponse>>
  submitMatchResult({
    required String? baseUrl,
    required String? tournamentId,
    required String? roundId,
    required String? matchId,
    required _i8.MatchSubmitResultRequest? request,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#submitMatchResult, [], {
              #baseUrl: baseUrl,
              #tournamentId: tournamentId,
              #roundId: roundId,
              #matchId: matchId,
              #request: request,
            }),
            returnValue:
                _i3.Future<
                  _i4.RepositoryResult<_i7.MatchSubmitResultResponse>
                >.value(
                  _i6.dummyValue<
                    _i4.RepositoryResult<_i7.MatchSubmitResultResponse>
                  >(
                    this,
                    Invocation.method(#submitMatchResult, [], {
                      #baseUrl: baseUrl,
                      #tournamentId: tournamentId,
                      #roundId: roundId,
                      #matchId: matchId,
                      #request: request,
                    }),
                  ),
                ),
            returnValueForMissingStub:
                _i3.Future<
                  _i4.RepositoryResult<_i7.MatchSubmitResultResponse>
                >.value(
                  _i6.dummyValue<
                    _i4.RepositoryResult<_i7.MatchSubmitResultResponse>
                  >(
                    this,
                    Invocation.method(#submitMatchResult, [], {
                      #baseUrl: baseUrl,
                      #tournamentId: tournamentId,
                      #roundId: roundId,
                      #matchId: matchId,
                      #request: request,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i4.RepositoryResult<_i7.MatchSubmitResultResponse>>);
}
