// Mocks generated by Mockito 5.4.5 from annotations
// in system/test/src/http/connectivity_interceptor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i3;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i5;
import 'package:dio/src/dio_exception.dart' as _i8;
import 'package:dio/src/dio_mixin.dart' as _i2;
import 'package:dio/src/options.dart' as _i6;
import 'package:dio/src/response.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInterceptorState_0<T> extends _i1.SmartFake
    implements _i2.InterceptorState<T> {
  _FakeInterceptorState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i3.Connectivity {
  @override
  _i4.Stream<List<_i5.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onConnectivityChanged),
            returnValue: _i4.Stream<List<_i5.ConnectivityResult>>.empty(),
            returnValueForMissingStub:
                _i4.Stream<List<_i5.ConnectivityResult>>.empty(),
          )
          as _i4.Stream<List<_i5.ConnectivityResult>>);

  @override
  _i4.Future<List<_i5.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i4.Future<List<_i5.ConnectivityResult>>.value(
              <_i5.ConnectivityResult>[],
            ),
            returnValueForMissingStub:
                _i4.Future<List<_i5.ConnectivityResult>>.value(
                  <_i5.ConnectivityResult>[],
                ),
          )
          as _i4.Future<List<_i5.ConnectivityResult>>);
}

/// A class which mocks [RequestInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestInterceptorHandler extends _i1.Mock
    implements _i2.RequestInterceptorHandler {
  @override
  _i4.Future<_i2.InterceptorState<dynamic>> get future =>
      (super.noSuchMethod(
            Invocation.getter(#future),
            returnValue: _i4.Future<_i2.InterceptorState<dynamic>>.value(
              _FakeInterceptorState_0<dynamic>(
                this,
                Invocation.getter(#future),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i2.InterceptorState<dynamic>>.value(
                  _FakeInterceptorState_0<dynamic>(
                    this,
                    Invocation.getter(#future),
                  ),
                ),
          )
          as _i4.Future<_i2.InterceptorState<dynamic>>);

  @override
  bool get isCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#isCompleted),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void next(_i6.RequestOptions? requestOptions) => super.noSuchMethod(
    Invocation.method(#next, [requestOptions]),
    returnValueForMissingStub: null,
  );

  @override
  void resolve(
    _i7.Response<dynamic>? response, [
    bool? callFollowingResponseInterceptor = false,
  ]) => super.noSuchMethod(
    Invocation.method(#resolve, [response, callFollowingResponseInterceptor]),
    returnValueForMissingStub: null,
  );

  @override
  void reject(
    _i8.DioException? error, [
    bool? callFollowingErrorInterceptor = false,
  ]) => super.noSuchMethod(
    Invocation.method(#reject, [error, callFollowingErrorInterceptor]),
    returnValueForMissingStub: null,
  );
}
